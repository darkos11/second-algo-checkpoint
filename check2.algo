exercice 1

ALGORITHM comparateur-compteur-array
VAR
table1:=[3, 1, 7, 9];
table2:=[2, 4, 1, 9, 3];

BEGIN
function findUniqueValuesAndSum(table1, table2) {
  // Create an empty array to store the unique values.
  const uniqueValues = [];

  // Iterate over the first table and add the values to the array.
  for (const value of table1) {
    if (!uniqueValues.includes(value)) {
      uniqueValues.push(value);
    }
  }

  // Iterate over the second table and add the values to the array.
  for (const value of table2) {
    if (!uniqueValues.includes(value)) {
      uniqueValues.push(value);
    }
  }

  // Calculate the sum of the unique values.
  const sumOfUniqueValues = uniqueValues.reduce((a, b) => a + b);

  // Return the sum of the unique values.
  return sumOfUniqueValues;
}

END
//////////////////////////////////////////////////////////////////////////////
Exercice 2 
ALGORITHM ; produit-scalaire 
VAR

let vectors = [
  [7, 1, 1],
  [6, 0, 2],
  [5, 7, 0],
  [3, 1, 2],
  [2, 3, 8],
  [0, 0, 0]
]
BEGIN
function dotProduct(vector1, vector2) {
  let result = 0;
  for (let i = 0; i < vector1.length; i++) {
    result += vector1[i] * vector2[i]
  }
  return result
}

for (let i = 0; i < vectors.length; i++) {
  for (let j = i + 1; j < vectors.length; j++) {
    if (dotProduct(vectors[i], vectors[j]) === 0) {
      console.log(`${vectors[i]} and ${vectors[j]} are orthogonal `)
    }
  }
}
END

